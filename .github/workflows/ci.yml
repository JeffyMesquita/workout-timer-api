name: 🧪 Continuous Integration

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.12.3'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🗄️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Generate Prisma Client
        run: |
          echo 'DATABASE_URL="postgresql://temp:temp@temp:5432/temp"' > .env
          pnpm prisma:generate
          rm .env

      - name: 🔍 Type Check
        run: pnpm type-check

      - name: 📝 Lint Check
        run: pnpm lint:check

      - name: 🎨 Format Check
        run: pnpm format:check

  # Job 2: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📥 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Generate Prisma Client
        run: |
          echo 'DATABASE_URL="postgresql://temp:temp@temp:5432/temp"' > .env
          pnpm prisma:generate
          rm .env

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://temp:temp@temp:5432/temp
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-for-ci
        run: pnpm test:unit

  # Job 3: Build Test
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📥 Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Generate Prisma Client
        run: |
          echo 'DATABASE_URL="postgresql://temp:temp@temp:5432/temp"' > .env
          pnpm prisma:generate
          rm .env

      - name: 🏗️ Build application
        run: pnpm build
