name: 🚀 Continuous Deployment

on:
  push:
    branches: [main, master]
    tags: ['v*']
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.0.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Push Docker Image
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 📊 Generate build summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

  # Job 2: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-push
    permissions:
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to Staging
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://workout-timer-api-staging.herokuapp.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🎭 Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your staging deployment commands here
          # Example: kubectl, helm, or cloud provider CLI

      - name: 🧪 Smoke test staging
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke tests for staging environment
          # curl -f https://workout-timer-api-staging.herokuapp.com/health

      - name: 📊 Deployment summary
        run: |
          echo "## 🎭 Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://workout-timer-api-staging.herokuapp.com" >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-and-push, security-scan, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://workout-timer-api.herokuapp.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your production deployment commands here

      - name: 🧪 Smoke test production
        run: |
          echo "🧪 Running smoke tests on production..."
          # Add smoke tests for production environment

      - name: 📊 Production deployment summary
        run: |
          echo "## 🌟 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build-and-push.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://workout-timer-api.herokuapp.com" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Notify deployment success
        if: success()
        run: |
          echo "🎉 Production deployment completed successfully!"
          # Add notification logic (Slack, Discord, etc.)

  # Job 5: Rollback (Manual)
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment:
      name: production

    steps:
      - name: 🔄 Rollback deployment
        run: |
          echo "🔄 Rolling back production deployment..."
          # Add rollback logic here

      - name: 📊 Rollback summary
        run: |
          echo "## 🔄 Rollback Executed" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Production deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Rollback completed" >> $GITHUB_STEP_SUMMARY
