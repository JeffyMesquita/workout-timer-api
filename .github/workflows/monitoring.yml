name: 📊 Monitoring & Health Checks

on:
  schedule:
    - cron: '*/15 * * * *' # Every 15 minutes
  workflow_dispatch: # Manual trigger

env:
  PRODUCTION_URL: https://workout-timer-api.herokuapp.com
  STAGING_URL: https://workout-timer-api-staging.herokuapp.com

jobs:
  # Job 1: Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            url: ${{ env.PRODUCTION_URL }}
          - environment: staging
            url: ${{ env.STAGING_URL }}

    steps:
      - name: 🏥 Health check for ${{ matrix.environment }}
        run: |
          echo "🏥 Checking health of ${{ matrix.environment }} environment..."

          # Basic health check
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.url }}/health || echo "000")

          if [ "$RESPONSE" = "200" ]; then
            echo "✅ ${{ matrix.environment }} is healthy"
          else
            echo "❌ ${{ matrix.environment }} health check failed (HTTP $RESPONSE)"
            exit 1
          fi

      - name: 📊 Response time check
        run: |
          echo "⏱️ Checking response time for ${{ matrix.environment }}..."

          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" ${{ matrix.url }} || echo "999")
          echo "Response time: ${RESPONSE_TIME}s"

          # Alert if response time > 5 seconds
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ Slow response time detected: ${RESPONSE_TIME}s"
          fi

      - name: 🔍 API endpoints check
        run: |
          echo "🔍 Checking critical API endpoints..."

          # Test auth endpoint
          AUTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST ${{ matrix.url }}/auth/refresh \
            -H "Content-Type: application/json" \
            -d '{"refreshToken":"invalid"}' || echo "000")

          if [ "$AUTH_RESPONSE" = "401" ]; then
            echo "✅ Auth endpoint responding correctly"
          else
            echo "⚠️ Auth endpoint unexpected response: $AUTH_RESPONSE"
          fi

  # Job 2: Performance Monitoring
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule'

    steps:
      - name: ⚡ Load test critical endpoints
        run: |
          echo "⚡ Running load tests..."

          # Install artillery for load testing
          npm install -g artillery@latest

          # Create load test config
          cat > load-test.yml << EOF
          config:
            target: ${{ env.PRODUCTION_URL }}
            phases:
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: "Health check load test"
              requests:
                - get:
                    url: "/health"
          EOF

          # Run load test
          artillery run load-test.yml --output load-test-report.json

          # Generate HTML report
          artillery report load-test-report.json --output load-test-report.html

      - name: 📊 Performance summary
        run: |
          echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Test Duration:** 60 seconds" >> $GITHUB_STEP_SUMMARY
          echo "**Arrival Rate:** 5 requests/second" >> $GITHUB_STEP_SUMMARY
          echo "**Total Requests:** ~300" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload performance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            load-test-report.json
            load-test-report.html

  # Job 3: Database Health Check
  database-health:
    name: 🗄️ Database Health
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule'

    steps:
      - name: 🗄️ Database connectivity check
        run: |
          echo "🗄️ Checking database connectivity..."

          # This would typically connect to your production database
          # For security, using a read-only health check endpoint

          DB_HEALTH=$(curl -s ${{ env.PRODUCTION_URL }}/health/database || echo "failed")

          if [ "$DB_HEALTH" = "ok" ]; then
            echo "✅ Database is healthy"
          else
            echo "❌ Database health check failed"
            # Add alerting logic here
          fi

  # Job 4: Uptime Monitoring
  uptime-check:
    name: ⏰ Uptime Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: ⏰ Record uptime check
        run: |
          echo "⏰ Recording uptime check at $(date)"

          # Check if API is up
          if curl -f ${{ env.PRODUCTION_URL }}/health; then
            echo "✅ API is up and running"
            echo "uptime=up" >> $GITHUB_OUTPUT
          else
            echo "❌ API is down!"
            echo "uptime=down" >> $GITHUB_OUTPUT
            
            # Send alert (implement your notification logic)
            echo "🚨 ALERT: API is down at $(date)"
          fi

      - name: 📊 Uptime summary
        run: |
          echo "## ⏰ Uptime Status" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.uptime-check.outputs.uptime == 'up' && '✅ UP' || '❌ DOWN' }}" >> $GITHUB_STEP_SUMMARY

  # Job 5: Alert on Failures
  alert-on-failure:
    name: 🚨 Alert on Failures
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [health-check, performance-monitoring, database-health, uptime-check]
    if: failure()

    steps:
      - name: 🚨 Send failure alert
        run: |
          echo "🚨 ALERT: Monitoring checks failed!"
          echo "Timestamp: $(date)"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"

          # Add your notification logic here:
          # - Slack webhook
          # - Discord webhook
          # - Email notification
          # - PagerDuty alert

          echo "## 🚨 Monitoring Alert" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ❌ Some monitoring checks failed" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Action Required:** Check failed jobs above" >> $GITHUB_STEP_SUMMARY
